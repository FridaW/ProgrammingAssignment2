## [Cache Inverse Matrix]
## Write a pair of functions that cache the inverse of a matrix


## This function creates a special "matrix" object that can cache its inverse.
  
makeCacheMatrix <- function(x = matrix()) {

    ## Initiate the ivs
    
    ivs <- NULL
    set <- function(y){
        x <<- y
        ivs <<- NULL
    }
    get <- function() x
    setInverse <- function(inverse) ivs <<- inverse
    getInverse <- function() ivs
    list ( set = set,
           get = get,
           setInverse = setInverse,
           getInverse = getInverse)
}
  
  
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.

cacheSolve <- function(x, ...) {

##Return a matrix that is the inverse of 'x'

    ivs <- x$getInverse()
    if(!is.null(ivs)){
        message("getting cached data")
        return(ivs)
    }
    ## get the matrix
    matx <- x$get()
    ivs <- solve(matx, ...)
    x$setInverse(ivs)
    ivs
}
